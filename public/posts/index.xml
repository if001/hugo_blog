<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on アンドロイドは推理小説を書くか?</title>
    <link>https://www.if-blog.site/posts/</link>
    <description>Recent content in Posts on アンドロイドは推理小説を書くか?</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Sat, 28 Sep 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/posts/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Vue.js &#43; Golang &#43; Firebase Authenticationでログイン処理</title>
      <link>https://www.if-blog.site/posts/edgwbs/book_reports_firebase_auth/</link>
      <pubDate>Sat, 28 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/edgwbs/book_reports_firebase_auth/</guid>
      <description>Vue.jsとGolangでWebアプリケーションでFirebase Authenticationを使い、ログイン処理を行います。
https://firebase.google.com/docs/auth/?hl=ja
  Firebaseの説明や導入などは、Qiitaにもわかりやすい記事がたくさん上がっているので、そちらを参考にしてください。
Vue.js側 VueCLI3を使い、typescriptのプロジェクトを作成します。今回は、vueのrouter guardは省略します。</description>
    </item>
    
    <item>
      <title>三行で読書感想文を書いて、SNSでシェアできるサービスを作った</title>
      <link>https://www.if-blog.site/posts/edgwbs/book_reports_review/</link>
      <pubDate>Wed, 25 Sep 2019 00:05:00 +0900</pubDate>
      
      <guid>https://www.if-blog.site/posts/edgwbs/book_reports_review/</guid>
      <description>[]
サービス概要 「読書感想文をもっと気軽に」をコンセプトに読んだ本の感想文/レビューを三行だけ書き、SNSでシェアするサービスです。
  三行読書感想文
使い方 googleアカウントもしくは、Twitterアカウントでログインできます。
その他のSNSアカウントでのログインは、随時対応していこうと思います。</description>
    </item>
    
    <item>
      <title>pythonで拡張子を取得する</title>
      <link>https://www.if-blog.site/posts/python-get-extn/</link>
      <pubDate>Fri, 01 Mar 2019 20:48:42 +0900</pubDate>
      
      <guid>https://www.if-blog.site/posts/python-get-extn/</guid>
      <description>ファイルの拡張子を取得する方法をいつも忘れるのでメモ
import os file_path = &amp;#34;hoge/test.md&amp;#34; root, ext = os.path.splitext(file_path) print(root, ext) 出力</description>
    </item>
    
    <item>
      <title>falconでアップロードサーバーを作る</title>
      <link>https://www.if-blog.site/posts/falcon/falcon-img-upload/</link>
      <pubDate>Tue, 16 Oct 2018 20:48:42 +0900</pubDate>
      
      <guid>https://www.if-blog.site/posts/falcon/falcon-img-upload/</guid>
      <description>はじめに 現在、サーバー上にHugoとHugoが生成した静的ファイルを置いてブログを公開している。 静的ファイルの生成とmdファイルや画像ファイルのアップロードのためfalconを使ってapiサーバーを作った。 falconをつかったのは、flaskやbottleは使ったことあったので、使ったことないものをということで。
クライアント クライアントにはpythonのrequestsを使います。
fileにタプルでファイル名を明示的に渡せる。 postの引数にfilesで渡すと、contents-typeもよしなにしてくれるんですね。
image_name = &amp;#34;test.</description>
    </item>
    
    <item>
      <title>Deeplearningまわりの最新論文を浅く広くみてまわる</title>
      <link>https://www.if-blog.site/posts/neuralnet/pepar_summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/neuralnet/pepar_summary/</guid>
      <description>最新論文の情報を広く浅く集めたい場合の巡回するサイトたちをまとめておきます。
おすすめがあれば教えてください。
Google Scholar: https://scholar.google.com/schhp?hl=ja
研究者やキーワードが決まっていると探しやすい。ただ、ザッピングには向かない。
いろいろ論文の検索エンジン使ってたけど、結局これが残った。texの引用が楽
arXiv arXiv https://arxiv.</description>
    </item>
    
    <item>
      <title>emacsひな祭りいってきたのでためになったpackageなどをまとめておく</title>
      <link>https://www.if-blog.site/posts/emacs/emacs-hinamatsuri/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/emacs/emacs-hinamatsuri/</guid>
      <description>2019年3月3日に開催された東京Emacsひなまつりにいってきました。
https://tokyo-emacs.connpass.com/event/121603/
随時コメント追加していきます。
ox-hugo
https://ox-hugo.scripter.co/
Ox-hugo
https://sfus.net/blog/2018/12/org-mode-with-ox-hugo/
Atomic-chrome
https://qiita.com/alpha22jp/items/f67bda3ed0c4ac84c29f</description>
    </item>
    
    <item>
      <title>falconを使ってみた</title>
      <link>https://www.if-blog.site/posts/falcon/falcon-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/falcon/falcon-tips/</guid>
      <description>はじめに Hugoをおいているwebサーバーに画像や、mdファイルをアップロードするためのapiサーバーとしてfalconを使ってみた。ORMなど必要なく、簡単なアップロードができれば良いということで、軽量さとシンプルさが特徴のfalconを使う。
簡単なtipsをメモしておく。
シンプルな例 falconの公式に乗っているように、シンプルな例は次のようになる。
# sample.py import falcon class QuoteResource: def on_get(self, req, resp): &amp;#34;&amp;#34;&amp;#34;Handles GET requests&amp;#34;&amp;#34;&amp;#34; quote = { &amp;#39;quote&amp;#39;: ( &amp;#34;I&amp;#39;ve always been more interested in &amp;#34; &amp;#34;the future than in the past.</description>
    </item>
    
    <item>
      <title>Google ColaboratoryでGoogle driveをマウントする</title>
      <link>https://www.if-blog.site/posts/python/colaboratory_google_drive_mount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/python/colaboratory_google_drive_mount/</guid>
      <description>久しぶりにColaboratory使ったらGoogle driveのマウントが簡単になってた。
before 認証
!apt-get install -y -qq software-properties-common python-software-properties module-init-tools !</description>
    </item>
    
    <item>
      <title>GoogleAnalyticsのPV、セッション、ユーザーの定義</title>
      <link>https://www.if-blog.site/posts/others/ga-define/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/others/ga-define/</guid>
      <description> ユーザー PV:ページ毎に閲覧された回数 セッション：30分以上の間隔をあけた操作、日付またぎ、別の参照元 ユーザー：cookieで保持
GDPRにより以下のものから保持期間を選択できる
 14 か月 26 か月(デフォルト) 38 か月 50 か月 自動的に期限切れにならない  集客 行動 コンバージョン </description>
    </item>
    
    <item>
      <title>Hugoでブログを作る</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-start-article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-start-article/</guid>
      <description>はじめに Hugoとは、go言語で書かれた、静的なwebサイトをbuildingするためのframeworkです。 Hugoを使ってブログを作ってみたので構築方法を簡単にまとめておきます。
サイトの作成 インストール brew install hugo  テンプレートの作成 hugo new site hugo-test  これで、次のようにテンプレートが作成されます。</description>
    </item>
    
    <item>
      <title>Hugoでリンクを新しいウィンドウで開く</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-href-to-target-blank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-href-to-target-blank/</guid>
      <description>リンクは新しいウィンドウで開いて欲しい派なんだけど、Hugoではデフォルトで通常のリンクの開きかた(?)をする。
hrefではtarget=&#39;_blank&#39;を指定すれば良いのだが、markdownでどうすれば良いのか調べた。 Hugoでは次のようにconfig.tomlするといける。
[blackfriday] hrefTargetBlank = true 簡単！
参考：
 https://gohugo.</description>
    </item>
    
    <item>
      <title>Hugoで作ったwebサイトを公開する</title>
      <link>https://www.if-blog.site/posts/others/http-portal-for-blog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/others/http-portal-for-blog/</guid>
      <description>はじめに GCE上にdockerコンテナを使って、hugoの静的ファイルを公開してます。
いろいろwebサービスを作ったりはしますが、公開するのは初めてだったので、いろいろと苦労した点をまとめておきます。
インフラ GCEを使います。ほんとは、image化してインスタンスグループで公開したかったのですが、とりあえず、コンテナをVM上にデプロイすることにします。
ドメイン ドメインは、お名前.comで取得します。これは特に説明なしでいけます。
DNSは、route53を使いたかったんですが、今回はgoogleのcloud DNSを使います。</description>
    </item>
    
    <item>
      <title>Hugoにgoogle analyticsを導入する</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-ga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-ga/</guid>
      <description>Hugoにgoogle analytics(ga)を導入しようと思ったら意外と簡単だった。
まず、gaアカウントを作成。
config.tomlに
googleAnalytics = &amp;quot;{ga tracking ID}&amp;quot;  を設定するだけ。</description>
    </item>
    
    <item>
      <title>Hugoのディレクトリ構造やデプロイ方法の備忘録</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-long-time-no-see/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-long-time-no-see/</guid>
      <description>久しぶりにHugoを触ったら、ディレクトリ構造からデプロイ方法までさっぱり忘れていたので、久しぶりに触った際のために備忘録を残す。
ディレクトリ 基本的なディレクトリは以下
markdownを書いたりと普段触るのはcontentディレクトリになる。
デプロイ後生成されるpublicディレクトリはサーバーなどで公開する。
archetypes/ ・・・ markdown記事を生成する際のテンプレートなど config.toml ・・・ 設定ファイル content/ ・・・　markdownの記事を配置 layouts/　・・・ Htmlの共通部分 public/ ・・・ デプロイ後に生成される静的ファイル群 static/ ・・・ cssなどの静的ファイルを配置 themes/ ・・・ テーマを配置  デプロイ hugoのプロジェクトルートで以下のコマンドを打つ</description>
    </item>
    
    <item>
      <title>Hugoの記事でコードハイライトする</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-code-highlight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-code-highlight/</guid>
      <description>Hugoでコードのシンタックスハイライトする場合のメモ
Hugo自体の機能を使う方法と、ハイライトする機能を持つjavascriptを読み込む2つの方法がある。
Hugo自体の機能使う Hugo 0.28からGo機能でシンタックスハイライトが可能になった。
Syntax Highlighting
config.tomlに以下のように記述
pygmentsCodefences = true pygmentsUseClasses = true 以下のコマンドでcssを生成する。</description>
    </item>
    
  </channel>
</rss>
