<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>アンドロイドは推理小説を描くか? on アンドロイドは推理小説を描くか?</title>
    <link>https://if001.github.io/hugo_blog/public/</link>
    <description>Recent content in アンドロイドは推理小説を描くか? on アンドロイドは推理小説を描くか?</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Mar 2019 20:48:42 +0900</lastBuildDate>
    <atom:link href="/hugo_blog/public/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>pythonで拡張子を取得する</title>
      <link>https://if001.github.io/hugo_blog/public/post/python-get-extn/</link>
      <pubDate>Fri, 01 Mar 2019 20:48:42 +0900</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/python-get-extn/</guid>
      <description>ファイルの拡張子を取得する方法をいつも忘れるのでメモ
import os file_path = &amp;#34;hoge/test.md&amp;#34; root, ext = os.path.splitext(file_path) print(root, ext) 出力
hoge/test .md  </description>
    </item>
    
    <item>
      <title>falconでアップロードサーバーを作る</title>
      <link>https://if001.github.io/hugo_blog/public/post/falcon/falcon-img-upload/</link>
      <pubDate>Tue, 16 Oct 2018 20:48:42 +0900</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/falcon/falcon-img-upload/</guid>
      <description>はじめに 現在、サーバー上にHugoとHugoが生成した静的ファイルを置いてブログを公開している。 静的ファイルの生成とmdファイルや画像ファイルのアップロードのためfalconを使ってapiサーバーを作った。 falconをつかったのは、flaskやbottleは使ったことあったので、使ったことないものをということで。
クライアント クライアントにはpythonのrequestsを使います。
fileにタプルでファイル名を明示的に渡せる。 postの引数にfilesで渡すと、contents-typeもよしなにしてくれるんですね。
image_name = &amp;#34;test.png&amp;#34; with open(image_file_path, &amp;#34;rb&amp;#34;) as image: files = {&amp;#39;file&amp;#39;: (image_name, image)} response = requests.post(url, files=files) print(response.text) サーバー falconはコンテナ上で動かします。ファイルアップロードのリクエストを受けると、 サーバー上のストレージに画像を保存します。
なんかできないと思ってたら、middlewareにMultipartMiddlewareを指定しないとだめだった。
fileは次のようにrequestから取得できる
image = req.get_param(&amp;#39;file&amp;#39;) raw = image.file.read() ファイル名は次のように取得
image_name = image.filename  実際は、corsとかあるがそれを省いた、アップロードだけの全体は以下のようになる。
from falcon_multipart.middleware import MultipartMiddleware import falcon import json class UploadImage(object): def on_post(self, req, resp): image = req.get_param(&amp;#39;file&amp;#39;) raw = image.file.read() image_name = image.filename filepath = os.path.join(BASE_DIR, &amp;#34;static&amp;#34;, image_name) try: with open(filepath, &amp;#39;wb&amp;#39;) as f: f.</description>
    </item>
    
    <item>
      <title>Deeplearningまわりの最新論文を浅く広くみてまわる</title>
      <link>https://if001.github.io/hugo_blog/public/post/neuralnet/pepar_summary/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/neuralnet/pepar_summary/</guid>
      <description>最新論文の情報を広く浅く集めたい場合の巡回するサイトたちをまとめておきます。
おすすめがあれば教えてください。
Google Scholar: https://scholar.google.com/schhp?hl=ja
研究者やキーワードが決まっていると探しやすい。ただ、ザッピングには向かない。
いろいろ論文の検索エンジン使ってたけど、結局これが残った。texの引用が楽
arXiv arXiv https://arxiv.org/
トップページは慣れないとちょっと見づらい。有名な研究者で検索したものや分野で絞り込んだものをチェックするのが使いやすそう。
arXivTimes https://medium.com/@arxivtimes
日本語、arXivのまとめ系、ツイッター
論文まとめてくれてるGitHub https://github.com/dennybritz/deeplearning-papernotes
arXivのまとめ。古いものは2011年から、新しいものは2018まで更新がある。
企業の論文 DeepMind https://deepmind.com/research/publications/
Microsoft Research Publications http://research.microsoft.com/apps/catalog/default.aspx?t=publications&amp;amp;ra=47200
Google Research Publications http://research.google.com/pubs/ArtificialIntelligenceandMachineLearning.html
Yahoo! Labs http://labs.yahoo.com/publication/?area=machine-learning</description>
    </item>
    
    <item>
      <title>GoogleAnalyticsのPV、セッション、ユーザーの定義</title>
      <link>https://if001.github.io/hugo_blog/public/post/others/ga-define/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/others/ga-define/</guid>
      <description> ユーザー PV:ページ毎に閲覧された回数 セッション：30分以上の間隔をあけた操作、日付またぎ、別の参照元 ユーザー：cookieで保持
GDPRにより以下のものから保持期間を選択できる
 14 か月 26 か月(デフォルト) 38 か月 50 か月 自動的に期限切れにならない  集客 行動 コンバージョン </description>
    </item>
    
    <item>
      <title>Hugoでブログを作る</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/hugo-start-article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/hugo-start-article/</guid>
      <description>はじめに Hugoとは、go言語で書かれた、静的なwebサイトをbuildingするためのframeworkです。 Hugoを使ってブログを作ってみたので構築方法を簡単にまとめておきます。
サイトの作成 インストール brew install hugo  テンプレートの作成 hugo new site hugo-test  これで、次のようにテンプレートが作成されます。
$ ls hugo-test/ archetypes/ config.toml content/ data/ layouts/ static/ themes/  テーマの適応 https://themes.gohugo.io/ ここからテーマを探す。
例として、https://themes.gohugo.io/hugo-theme-learn/ を使います。
$ cd hugo-test/themes $ git clone https://github.com/matcornic/hugo-theme-learn.git  テーマを適応させるために、config.tomlにthemeを記述します。
theme = &amp;quot;hugo-theme-learn&amp;quot;  サーバーの起動 $ hugo server -D -t hugo-theme-learn  オプションDでDraftフラグのついた記事の確認、オプションtでテーマの適応です。 cloneしてきたtheme内の、layoutとstaticなどを、作成したテンプレート内のlayout、staticに移動しておくと、templateのマイナーチェンジが行えます。
デフォルトでhttp://localhost:1313/で起動するのでアクセスしてみる。
記事の追加 記事の作成
$ hugo new post/test.md hugo_test/content/post/test.md created  以下のようなmarkdownファイルが作成される
cat content/post/test.md --- title: &amp;quot;Test&amp;quot; date: 2018-10-15T18:51:47+09:00 draft: true ---  ここで、draftは記事を後悔するかのフラグ この出力フォーマットも、独自に設定が可能</description>
    </item>
    
    <item>
      <title>Hugoでリンクを新しいウィンドウで開く</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/hugo-href-to-target-blank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/hugo-href-to-target-blank/</guid>
      <description>リンクは新しいウィンドウで開いて欲しい派なんだけど、Hugoではデフォルトで通常のリンクの開きかた(?)をする。
hrefではtarget=&#39;_blank&#39;を指定すれば良いのだが、markdownでどうすれば良いのか調べた。 Hugoでは次のようにconfig.tomlするといける。
[blackfriday] hrefTargetBlank = true 簡単！
参考：
 https://gohugo.io/getting-started/configuration/ https://www.meganii.com/blog/2017/02/25/hugo-markdown-href-target-blank/  </description>
    </item>
    
    <item>
      <title>Hugoで作ったwebサイトを公開する</title>
      <link>https://if001.github.io/hugo_blog/public/post/others/http-portal-for-blog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/others/http-portal-for-blog/</guid>
      <description>はじめに GCE上にdockerコンテナを使って、hugoの静的ファイルを公開してます。
いろいろwebサービスを作ったりはしますが、公開するのは初めてだったので、いろいろと苦労した点をまとめておきます。
インフラ GCEを使います。ほんとは、image化してインスタンスグループで公開したかったのですが、とりあえず、コンテナをVM上にデプロイすることにします。
ドメイン ドメインは、お名前.comで取得します。これは特に説明なしでいけます。
DNSは、route53を使いたかったんですが、今回はgoogleのcloud DNSを使います。
Google Cloud Consoleから、「ネットワークサービス」→「Cloud DNS」を選択します。
任意のゾーン名、取得したドメイン、(説明)を入力して作成。
  Aレコードの登録 DNS名には、www.取得したドメイン、リソースタイプにはAレコードを設定し、作成します。   レジストラへの登録 生成されるNSレコードのns-cloud-c1.googledomains.com.をお名前.com側に登録します。
https化 let&amp;rsquo;s encryptを使ってhttps化しようと思っていたところ便利なものを発見したのでこちらを使います。
https-portal
自動で証明書の更新も行ってくれます。すごい。便利。
親切にdocker-composeが公式に載せてあるので、参考にします。 docker-composeのインストールはpipなどで行ってください。
https-portal:image:steveltn/https-portal:1ports:-&amp;#39;80:80&amp;#39;-&amp;#39;443:443&amp;#39;links:-wordpressrestart:alwaysenvironment:DOMAINS:&amp;#39;wordpress.example.com -&amp;gt; http://wordpress:80&amp;#39;# STAGE: &amp;#39;production&amp;#39;# FORCE_RENEW: &amp;#39;true&amp;#39;wordpress:image:wordpresslinks:-db:mysqldb:image:mariadbenvironment:MYSQL_ROOT_PASSWORD:&amp;#39;&amp;lt;a secure password&amp;gt;&amp;#39; imageのバージョンは:1と指定しましょう。最新版を取ってくるようになります。
image: steveltn/https-portal:1  1.2以下だと、let&amp;rsquo;s Encryptで証明書を取得する際にエラーが起きるので注意です。
links:-wordpress linksで公開するサービス名を指定しましょう。
environment:DOMAINS:&amp;#39;wordpress.example.com -&amp;gt; http://wordpress:80&amp;#39; 環境変数のDMAINSでは、リクエストを受けるドメイン -&amp;gt; https化したいエンドポイントを指定します。
linksで指定したエイリアスで指定できます。また、-&amp;gt;を=&amp;gt;に変更することでリダイレクトができます。
STAGEは、次の3つが指定できます。
 STAGE: &#39;local&#39;でオレオレ証明書を作成します。テストなどに STAGE: &#39;staging&#39;でテスト用の証明書を作成します。 STAGE: &#39;production&#39;で本番用に、Let&amp;rsquo;s Encryptで正式な証明書を作成します。  その他、環境変数も指定できます。この辺りを参考しながら、設定を行います。 https://github.com/SteveLTN/https-portal/tree/master/fs_overlay/var/lib/nginx-conf</description>
    </item>
    
    <item>
      <title>Hugoにgoogle analyticsを導入する</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/hugo-ga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/hugo-ga/</guid>
      <description>Hugoにgoogle analytics(ga)を導入しようと思ったら意外と簡単だった。
まず、gaアカウントを作成。
config.tomlに
googleAnalytics = &amp;quot;{ga tracking ID}&amp;quot;  を設定するだけ。</description>
    </item>
    
    <item>
      <title>Hugoのディレクトリ構造やデプロイ方法の備忘録</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/hugo-long-time-no-see/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/hugo-long-time-no-see/</guid>
      <description>久しぶりにHugoを触ったら、ディレクトリ構造からデプロイ方法までさっぱり忘れていたので、久しぶりに触った際のために備忘録を残す。
ディレクトリ 基本的なディレクトリは以下
markdownを書いたりと普段触るのはcontentディレクトリになる。
デプロイ後生成されるpublicディレクトリはサーバーなどで公開する。
archetypes/ ・・・ markdown記事を生成する際のテンプレートなど config.toml ・・・ 設定ファイル content/ ・・・　markdownの記事を配置 layouts/　・・・ Htmlの共通部分 public/ ・・・ デプロイ後に生成される静的ファイル群 static/ ・・・ cssなどの静的ファイルを配置 themes/ ・・・ テーマを配置  デプロイ hugoのプロジェクトルートで以下のコマンドを打つ
$ hugo -t ./ 記事を書くときには以下のコマンドを使う。
$ hugo server -t ./  localにサーバーが立ち上がり、markdownを書きながら生成される記事を確認できる。</description>
    </item>
    
    <item>
      <title>Hugoの記事でコードハイライトする</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/hugo-code-highlight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/hugo-code-highlight/</guid>
      <description>Hugoでコードのシンタックスハイライトする場合のメモ
Hugo自体の機能を使う方法と、ハイライトする機能を持つjavascriptを読み込む2つの方法がある。
Hugo自体の機能使う Hugo 0.28からGo機能でシンタックスハイライトが可能になった。
Syntax Highlighting
config.tomlに以下のように記述
pygmentsCodefences = true pygmentsUseClasses = true 以下のコマンドでcssを生成する。
$hugo gen chromastyles --style=monokai &amp;gt; syntax.css 生成したcssをindex.htmlなどから読み込むと反映される。
--styleオプションの指定は、pygmentsから探す。
highlightjsを使う highlightjs
対応言語が多いのがメリット。
以下のようにcdnからとってくるようにしておくと良い。
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/styles/default.min.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.15.6/highlight.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;hljs.initHighlightingOnLoad();&amp;lt;/script&amp;gt; 一行目の記述を以下のように書き換えることでテーマを選択できる。
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;//cdnjs.</description>
    </item>
    
    <item>
      <title>Hugoの記事にdescriptionを追加する</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/hugo-add-site-description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/hugo-add-site-description/</guid>
      <description>Hugoで書いた記事が検索で引っかからないなと思っていたら、descriptionタグが設定されていませんでした。 これでは検索に引っかからないのでdescriptionタグをつけましょう!
html側で次のように書くと、markdownに書いたdescriptionが参照できます。
{{ .Description }} markdown側では、ヘッダーに次のように記述します。
description=&amp;quot;hogehoge&amp;quot;  これまで書いた記事全てに、descriptionをつけていくのは面倒ですね。
次のようにサイトサマリーを参照することも可能です
{{ .Summary }} ただし、デフォルトでサマリーが大きくなりすぎるので、config.tomlに次のような記述を追加します。
hasCJKLanguage=true こうすることでサマリーがいい感じのサイズになります。
参考：https://blog.awm.jp/2016/01/02/hugo/
最終的に、header.htmlなどに次のように記述しておけば、descriptionを書いておくとそちらが使われるようになります。
{{ if .Description }} &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;{{ .Description }}&amp;#34;&amp;gt; {{ else }} &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;{{ .Summary }}&amp;#34;&amp;gt; {{ end }} サイトのディスクリプションと記事のディスクリプションを分ける(追記) {{ if .IsHome }}でトップページかどうか判定できるので、トップページならば、configのディスクリプションを使い、記事内ならば記事に設定してあるディスクリプションを使う。
html側は次のように記述する。
{{ if .IsHome }} {{ with .Site.Params.description }} &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;{{ . }}&amp;#34;&amp;gt; {{ end }} {{ end }} {{ if .Description }} &amp;lt;meta name=&amp;#34;description&amp;#34; content=&amp;#34;{{ .</description>
    </item>
    
    <item>
      <title>Hugoの記事に画像を載せる</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/hugo_on_image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/hugo_on_image/</guid>
      <description>Hugoに画像を載せるときは、shortcodesを使うと良いらしい。
画像を配置するディクトリを以下のように作っておく。
{root}/content/post/images/  以下のように記述すると表示できる。
{{&amp;lt; figure src=&amp;quot;../../images/test.png&amp;quot; title=&amp;quot;test&amp;quot; width=&amp;quot;320&amp;quot; height=&amp;quot;640&amp;quot; &amp;gt;}}  相対パスで記述でき、width、heightも設定可能。
生成されるHTMLは以下のようになる。
&amp;lt;figure&amp;gt; &amp;lt;img src=&amp;quot;../../images/test.png&amp;quot; /&amp;gt; &amp;lt;figcaption&amp;gt; &amp;lt;h4&amp;gt;test&amp;lt;/h4&amp;gt; &amp;lt;/figcaption&amp;gt; &amp;lt;/figure&amp;gt;  画像を実際に表示
  記事と同じディレクトリに画像を配置しておくと、シンプルなパスで記述できるので、その辺は好みで。
画像が多くなりすぎるとgitで管理したくないので、クラウドストレージとかに移行するとかしないとな&amp;hellip;</description>
    </item>
    
    <item>
      <title>Hugoの記事を更新順にソートする</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/hugo-date-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/hugo-date-sort/</guid>
      <description>Hugoの記事を更新順にソートするメモです。
まず、Hugoの記事に更新時刻情報を付与します。markdownのヘッダーにdate情報を書いても良いのですが、gitで管理している場合には、Lastmodで更新時刻が取得できるのでそれを使います。
そのほかにもgitから情報が取得できます。https://gohugo.io/variables/git/
config.tomlに以下のように記述します。
enableGitInfo=true 以下のように使う。
{{ .Lastmod.Format &amp;quot;2006/01/02&amp;quot; }}  この更新事項を使って、記事を並び替えます。
記事のリストを表示するhtmlはもともと以下のように記述してありました。
{{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;post&amp;quot;) 10 }} {{ range $paginator.Pages }}  以下のリンクを参考にします。
https://gohugo.io/templates/lists/
lastmod以外にも並び替えが行えます。
結局、以下のように記述しました。
{{ $paginator := .Paginate (where .Data.Pages &amp;quot;Type&amp;quot; &amp;quot;post&amp;quot;).ByLastmod.Reverse 10 }} {{ range $paginator.Pages }}  </description>
    </item>
    
    <item>
      <title>KaTeXを使ってみる</title>
      <link>https://if001.github.io/hugo_blog/public/post/hugo/katex-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/hugo/katex-introduction/</guid>
      <description>これまでMathJaxを使っていたが、描画が遅いということもあり、$\KaTeX$を使ってみることにしました。 KaTeX:https://katex.org/
以下を加えるだけでおk
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.8.3/katex.min.css&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.10.0/katex.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.10.0/contrib/auto-render.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt;$(document).ready(function(){renderMathInElement(document.body,{delimiters: [{left: &amp;#34;[[&amp;#34;, right: &amp;#34;]]&amp;#34;, display: true},{left: &amp;#34;$&amp;#34;, right: &amp;#34;$&amp;#34;, display: false}]})});&amp;lt;/script&amp;gt; MathJaxで表示していた数式も無事表示されてとりあえず問題なしです。 実際に入れてみた感じやっぱり早い。
参考 KaTeXによる数式の表示:https://sekika.github.io/2017/05/01/katex-equation/ KaTeXを導入しました:http://nshi.jp/contents/other/katex/ KaTeXのデモ:http://sixthform.info/katex/examples/demo.html</description>
    </item>
    
    <item>
      <title>Rustでmodule間にまたがるmacro呼び出し</title>
      <link>https://if001.github.io/hugo_blog/public/post/others/rust-macro-use-another/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://if001.github.io/hugo_blog/public/post/others/rust-macro-use-another/</guid>
      <description>Rustのmacroをモジュール化して、別のモジュールから呼ぼうと思ったらうまくいかなかった。
日本語の記事があまりなかったのと、自分の備忘録ようにメモを残しておく。
rustのバージョンは1.27.0
参考 https://github.com/rust-lang/book/issues/401
マクロの書き方とか、rustのimport周りは意外と日本語記事があったので、そっちを参考に
ファイル構成 lib.rsでmodをまとめて、main.rsで呼ぶようなファイル構成にする。 このようにしておくと、main.rsのなかでmodを宣言しなくてよくなるし、また誰が誰を公開しているかわかりやすくなる（たぶん）。
crate/ src/ main.rs lib.rs mod1/ mod.rs macro.rs mod2/ mod.rs macro_run.rs  この時、main.rsを実行すると、macro_run.rsの中の関数が呼ばれ、この関数内でmacro.rsに定義してあるマクロが呼び出されるとする。
簡単に言うと、モジュール間に跨ったマクロ呼び出しが行いたい。
書き方 main.rsでは、macro_run内にあるrun関数を呼ぶ。
// main.rs externcraterust_test2;userust_test2::mod2::macro_run;fn main(){macro_run::run();} run関数内では、foo!というマクロを使う。
// macro_run.rs #[macro_use]usemod1::macro_test::*;pubfn run(){letfoo=foo!(1);println!(&amp;#34;{}&amp;#34;,foo);} fooマクロは、引数をそのまま返す単純なマクロ。
// macro.rs #[macro_use]macro_rules!foo{($e: expr)=&amp;gt;{$e}} macro_useをつける。
// mod1/lib.rs #[macro_use]pubmod macro_test; ここのlibにもmacro_useが必要。
// lib.rs #[macro_use]pubmod mod1;pubmod mod2; 次のように#[macro use]の順番が入れ変わるとだめ (参考：https://www.ncameron.org/blog/macros-in-rust-pt4/)
// lib.rs pubmod mod2;#[macro_use]pubmod mod1; まとめ  #[macro_use]をいっぱいかく lib.rsに書く順番が大切 コードの一部はネットの情報としてあったが、コードの全体がわからずハマったので全体をgithubにあげておく  https://github.com/if001/rust_macro_test</description>
    </item>
    
  </channel>
</rss>
