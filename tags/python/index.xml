<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on アンドロイドは推理小説を書くか?</title>
    <link>https://www.if-blog.site/tags/python/</link>
    <description>Recent content in python on アンドロイドは推理小説を書くか?</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Fri, 01 Mar 2019 20:48:42 +0900</lastBuildDate>
    <atom:link href="/tags/python/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>pythonで拡張子を取得する</title>
      <link>https://www.if-blog.site/post/python-get-extn/</link>
      <pubDate>Fri, 01 Mar 2019 20:48:42 +0900</pubDate>
      
      <guid>https://www.if-blog.site/post/python-get-extn/</guid>
      <description>ファイルの拡張子を取得する方法をいつも忘れるのでメモ
import os file_path = &amp;#34;hoge/test.md&amp;#34; root, ext = os.path.splitext(file_path) print(root, ext) 出力</description>
    </item>
    
    <item>
      <title>falconでアップロードサーバーを作る</title>
      <link>https://www.if-blog.site/post/falcon/falcon-img-upload/</link>
      <pubDate>Tue, 16 Oct 2018 20:48:42 +0900</pubDate>
      
      <guid>https://www.if-blog.site/post/falcon/falcon-img-upload/</guid>
      <description>はじめに 現在、サーバー上にHugoとHugoが生成した静的ファイルを置いてブログを公開している。 静的ファイルの生成とmdファイルや画像ファイルのアップロードのためfalconを使ってapiサーバーを作った。 falconをつかったのは、flaskやbottleは使ったことあったので、使ったことないものをということで。
クライアント クライアントにはpythonのrequestsを使います。
fileにタプルでファイル名を明示的に渡せる。 postの引数にfilesで渡すと、contents-typeもよしなにしてくれるんですね。
image_name = &amp;#34;test.</description>
    </item>
    
    <item>
      <title>falconを使ってみた</title>
      <link>https://www.if-blog.site/post/falcon/falcon-tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/post/falcon/falcon-tips/</guid>
      <description>はじめに Hugoをおいているwebサーバーに画像や、mdファイルをアップロードするためのapiサーバーとしてfalconを使ってみた。ORMなど必要なく、簡単なアップロードができれば良いということで、軽量さとシンプルさが特徴のfalconを使う。
簡単なtipsをメモしておく。
シンプルな例 falconの公式に乗っているように、シンプルな例は次のようになる。
# sample.py import falcon class QuoteResource: def on_get(self, req, resp): &amp;#34;&amp;#34;&amp;#34;Handles GET requests&amp;#34;&amp;#34;&amp;#34; quote = { &amp;#39;quote&amp;#39;: ( &amp;#34;I&amp;#39;ve always been more interested in &amp;#34; &amp;#34;the future than in the past.</description>
    </item>
    
    <item>
      <title>Google ColaboratoryでGoogle driveをマウントする</title>
      <link>https://www.if-blog.site/post/python/colaboratory_google_drive_mount/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/post/python/colaboratory_google_drive_mount/</guid>
      <description>久しぶりにColaboratory使ったらGoogle driveのマウントが簡単になってた。
before 認証
!apt-get install -y -qq software-properties-common python-software-properties module-init-tools !</description>
    </item>
    
    <item>
      <title>matplotlibのよく使う記法まとめ</title>
      <link>https://www.if-blog.site/post/python/python-matplotlib_base/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/post/python/python-matplotlib_base/</guid>
      <description>すぐ忘れるので、matplotlibのよく使う記法をまとめておく
公式：https://matplotlib.org/gallery.html
普段は散布図とかplotとかしか使わないけど、こうして見るといろんなグラフがかけるみたい
matplotlib,pyplot,pylabの違い matplotlibがパッケージ全体
pyplotはそのモジュール、スクリプトで作図するときに使う
pylabのimportは推奨されてない模様、インタラクティブな作図にはこっちを使うらしい
基本的には、import matplotlib.pyplot as pltのように使う</description>
    </item>
    
    <item>
      <title>pyenv環境でaws cli入れたらコマンドが見つからない</title>
      <link>https://www.if-blog.site/post/others/aws-cli-at-pyenv/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/post/others/aws-cli-at-pyenv/</guid>
      <description>pyenv環境でaws cli入れたらコマンドが見つからないって言われたので調べたメモ
バージョン：pyenv:1.0.10
公式通りにインストールする。
$ pip3 install awscli --upgrade --user  すると、</description>
    </item>
    
    <item>
      <title>word2vecでベクトルから単語を出力する</title>
      <link>https://www.if-blog.site/post/nlp/word2vec_output_word/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/post/nlp/word2vec_output_word/</guid>
      <description>word2vecで単語をベクトルにしたり、類似度判定した記事はたくさんあるが、ベクトルから類似単語を出力する日本語記事を見つけられなかったのでメモ。 stack overflowにあった。 https://stackoverflow.com/questions/32759712/how-to-find-the-closest-word-to-a-vector-using-word2vec
結論 結論から言うと、以下のように適当にモデルを作りmost_simlar関数にベクトルを与えるだけ。
sentences = gensim.models.word2vec.Text8Corpus(filename) model = Word2Vec(sentences, size=100, window=5, min_count=5, workers=4) model.</description>
    </item>
    
    <item>
      <title>文字をベクトル化する</title>
      <link>https://www.if-blog.site/post/nlp/char_vec/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/post/nlp/char_vec/</guid>
      <description>文章生成にchar-level lstmを使ってみる。英語ではうまくいっている例があるが日本語では難しい。これは、日本語は英語に比べ文字数が多く、ニューラルネットワークの次元数(パラメータ数)が増やす必要があるのが原因の1つだと思う。また、次元削減のため、日本語では文章を単語に区切り単語をベクトル化し、lstmで文章を生成する手法もあるが、単語に区切る時点でしゃべり言葉やネットの言葉ではうまく区切れないという問題がある。そこで、日本語の文字を画像として生成し、その画像をauto-encoderを用いてベクトル化することで、文字のベクトル化を行い、lstmに食わせるという手法を試して見ようと思う。
今回は、auto-encodeを用いた文字レベルのベクトル化までを行ってみようと思う。
コードはここ、https://github.com/if001/fifc.git
以下の3工程で行う。
 フォントファイルからフォント画像を生成 文字列とフォント画像をマッピング フォント画像から特徴量を生成  フォントファイルからフォント画像を生成 フォントファイルは、PILのImageFontのturetypeを使い読み込むことができる。</description>
    </item>
    
  </channel>
</rss>
