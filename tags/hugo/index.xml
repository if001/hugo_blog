<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hugo on アンドロイドは推理小説を書くか?</title>
    <link>https://www.if-blog.site/tags/hugo/</link>
    <description>Recent content in Hugo on アンドロイドは推理小説を書くか?</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 16 Oct 2018 20:48:42 +0900</lastBuildDate>
    <atom:link href="/tags/hugo/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>falconでアップロードサーバーを作る</title>
      <link>https://www.if-blog.site/posts/falcon/falcon-img-upload/</link>
      <pubDate>Tue, 16 Oct 2018 20:48:42 +0900</pubDate>
      
      <guid>https://www.if-blog.site/posts/falcon/falcon-img-upload/</guid>
      <description>はじめに 現在、サーバー上にHugoとHugoが生成した静的ファイルを置いてブログを公開している。 静的ファイルの生成とmdファイルや画像ファイルのアップロードのためfalconを使ってapiサーバーを作った。 falconをつかったのは、flaskやbottleは使ったことあったので、使ったことないものをということで。
クライアント クライアントにはpythonのrequestsを使います。
fileにタプルでファイル名を明示的に渡せる。 postの引数にfilesで渡すと、contents-typeもよしなにしてくれるんですね。
image_name = &amp;#34;test.</description>
    </item>
    
    <item>
      <title>Hugoでブログを作る</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-start-article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-start-article/</guid>
      <description>はじめに Hugoとは、go言語で書かれた、静的なwebサイトをbuildingするためのframeworkです。 Hugoを使ってブログを作ってみたので構築方法を簡単にまとめておきます。
サイトの作成 インストール brew install hugo  テンプレートの作成 hugo new site hugo-test  これで、次のようにテンプレートが作成されます。</description>
    </item>
    
    <item>
      <title>Hugoでリンクを新しいウィンドウで開く</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-href-to-target-blank/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-href-to-target-blank/</guid>
      <description>リンクは新しいウィンドウで開いて欲しい派なんだけど、Hugoではデフォルトで通常のリンクの開きかた(?)をする。
hrefではtarget=&#39;_blank&#39;を指定すれば良いのだが、markdownでどうすれば良いのか調べた。 Hugoでは次のようにconfig.tomlするといける。
[blackfriday] hrefTargetBlank = true 簡単！
参考：
 https://gohugo.</description>
    </item>
    
    <item>
      <title>Hugoで作ったwebサイトを公開する</title>
      <link>https://www.if-blog.site/posts/others/http-portal-for-blog/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/others/http-portal-for-blog/</guid>
      <description>はじめに GCE上にdockerコンテナを使って、hugoの静的ファイルを公開してます。
いろいろwebサービスを作ったりはしますが、公開するのは初めてだったので、いろいろと苦労した点をまとめておきます。
インフラ GCEを使います。ほんとは、image化してインスタンスグループで公開したかったのですが、とりあえず、コンテナをVM上にデプロイすることにします。
ドメイン ドメインは、お名前.comで取得します。これは特に説明なしでいけます。
DNSは、route53を使いたかったんですが、今回はgoogleのcloud DNSを使います。</description>
    </item>
    
    <item>
      <title>Hugoにgoogle analyticsを導入する</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-ga/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-ga/</guid>
      <description>Hugoにgoogle analytics(ga)を導入しようと思ったら意外と簡単だった。
まず、gaアカウントを作成。
config.tomlに
googleAnalytics = &amp;quot;{ga tracking ID}&amp;quot;  を設定するだけ。</description>
    </item>
    
    <item>
      <title>Hugoのディレクトリ構造やデプロイ方法の備忘録</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-long-time-no-see/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-long-time-no-see/</guid>
      <description>久しぶりにHugoを触ったら、ディレクトリ構造からデプロイ方法までさっぱり忘れていたので、久しぶりに触った際のために備忘録を残す。
ディレクトリ 基本的なディレクトリは以下
markdownを書いたりと普段触るのはcontentディレクトリになる。
デプロイ後生成されるpublicディレクトリはサーバーなどで公開する。
archetypes/ ・・・ markdown記事を生成する際のテンプレートなど config.toml ・・・ 設定ファイル content/ ・・・　markdownの記事を配置 layouts/　・・・ Htmlの共通部分 public/ ・・・ デプロイ後に生成される静的ファイル群 static/ ・・・ cssなどの静的ファイルを配置 themes/ ・・・ テーマを配置  デプロイ hugoのプロジェクトルートで以下のコマンドを打つ</description>
    </item>
    
    <item>
      <title>Hugoの記事でコードハイライトする</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-code-highlight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-code-highlight/</guid>
      <description>Hugoでコードのシンタックスハイライトする場合のメモ
Hugo自体の機能を使う方法と、ハイライトする機能を持つjavascriptを読み込む2つの方法がある。
Hugo自体の機能使う Hugo 0.28からGo機能でシンタックスハイライトが可能になった。
Syntax Highlighting
config.tomlに以下のように記述
pygmentsCodefences = true pygmentsUseClasses = true 以下のコマンドでcssを生成する。</description>
    </item>
    
    <item>
      <title>Hugoの記事にdescriptionを追加する</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-add-site-description/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-add-site-description/</guid>
      <description>Hugoで書いた記事が検索で引っかからないなと思っていたら、descriptionタグが設定されていませんでした。 これでは検索に引っかからないのでdescriptionタグをつけましょう!
html側で次のように書くと、markdownに書いたdescriptionが参照できます。
{{ .Description }} markdown側では、ヘッダーに次のように記述します。
description=&amp;quot;hogehoge&amp;quot;  これまで書いた記事全てに、descriptionをつけていくのは面倒ですね。</description>
    </item>
    
    <item>
      <title>Hugoの記事に画像を載せる</title>
      <link>https://www.if-blog.site/posts/hugo/hugo_on_image/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo_on_image/</guid>
      <description>Hugoに画像を載せるときは、shortcodesを使うと良いらしい。
画像を配置するディクトリを以下のように作っておく。
{root}/content/post/images/  以下のように記述すると表示できる。
{{&amp;lt; figure src=&amp;quot;../../images/test.png&amp;quot; title=&amp;quot;test&amp;quot; width=&amp;quot;320&amp;quot; height=&amp;quot;640&amp;quot; &amp;gt;}}  相対パスで記述でき、width、heightも設定可能。</description>
    </item>
    
    <item>
      <title>Hugoの記事を更新順にソートする</title>
      <link>https://www.if-blog.site/posts/hugo/hugo-date-sort/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo-date-sort/</guid>
      <description>Hugoの記事を更新順にソートするメモです。
まず、Hugoの記事に更新時刻情報を付与します。markdownのヘッダーにdate情報を書いても良いのですが、gitで管理している場合には、Lastmodで更新時刻が取得できるのでそれを使います。
そのほかにもgitから情報が取得できます。https://gohugo.io/variables/git/
config.tomlに以下のように記述します。
enableGitInfo=true 以下のように使う。
{{ .Lastmod.Format &amp;quot;2006/01/02&amp;quot; }}  この更新事項を使って、記事を並び替えます。</description>
    </item>
    
    <item>
      <title>HugoをGitHub Pagesで公開する</title>
      <link>https://www.if-blog.site/posts/hugo/hugo_git_pages/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/hugo_git_pages/</guid>
      <description>GitHub Pagesを使ってHugoを公開する手順をメモ
やりたいこととしては、
 Hugoのプロジェクトを丸ごとgitで管理 プロジェクトの下に作られるpublicをGitHub Pagesで公開 独自ドメインの設定  の3つです。</description>
    </item>
    
    <item>
      <title>KaTeXを使ってみる</title>
      <link>https://www.if-blog.site/posts/hugo/katex-introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.if-blog.site/posts/hugo/katex-introduction/</guid>
      <description>これまでMathJaxを使っていたが、描画が遅いということもあり、$\KaTeX$を使ってみることにしました。 KaTeX:https://katex.org/
以下を加えるだけでおk
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.8.3/katex.min.css&amp;#34; /&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.10.0/katex.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://cdnjs.</description>
    </item>
    
  </channel>
</rss>
